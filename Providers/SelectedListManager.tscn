[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
resource_name = "SelectedListManager"
script/source = "extends Node

var selected_list = []
onready var detailspanel: DetailsPanel = DetailsPanel.get_instance(get_tree())

# Function poises data to get
func apply_values_to_selected_type(parameter_name: String, parameter_value: int):
	var parameters = {parameter_name: parameter_value}
	for entry in selected_list:
		var data = entry[\"data\"]
		if \"lv\" in data:
			apply_values_to_enemy(data, parameters)
		else:
			apply_values_to_item(data, parameters)


# Function to apply values to selected enemy
func apply_values_to_enemy(enemy_data: Enemy, parameters: Dictionary):
	for parameter_name in parameters.keys():
		var parameter_value = parameters[parameter_name]
		match parameter_name:
			\"named_enemy_params_id\":
				enemy_data.named_enemy_params_id = parameter_value
			\"raid_boss_id\":
				enemy_data.raid_boss_id = parameter_value
			\"scale\":
				enemy_data.scale = parameter_value
			\"lv\":
				enemy_data.lv = parameter_value
			\"hm_preset_no\":
				enemy_data.hm_preset_no = parameter_value
			\"start_think_tbl_no\":
				enemy_data.start_think_tbl_no = parameter_value
			\"repop_num\":
				enemy_data.repop_num = parameter_value
			\"repop_count\":
				enemy_data.repop_count = parameter_value
			\"enemy_target_types_id\":
				enemy_data.enemy_target_types_id = parameter_value
			\"montage_fix_no\":
				enemy_data.montage_fix_no = parameter_value
			\"set_type\":
				enemy_data.set_type = parameter_value
			\"infection_type\":
				enemy_data.infection_type = parameter_value
			\"time_type\":
				enemy_data.time_type = parameter_value
			\"is_boss_gauge\":
				enemy_data.is_boss_gauge = parameter_value
			\"is_boss_bgm\":
				enemy_data.is_boss_bgm = parameter_value
			\"is_manual_set\":
				enemy_data.is_manual_set = parameter_value
			\"is_area_boss\":
				enemy_data.is_area_boss = parameter_value
			\"is_blood_enemy\":
				enemy_data.is_blood_enemy = parameter_value
			\"is_highorb_enemy\":
				enemy_data.is_highorb_enemy = parameter_value
			\"blood_orbs\":
				enemy_data.blood_orbs = parameter_value
			\"high_orbs\":
				enemy_data.high_orbs = parameter_value
			\"experience\":
				enemy_data.experience = parameter_value
			\"drops_table\":
				enemy_data.drops_table.id = parameter_value
			# Add more cases for other parameters as needed
			_:
				# Handle unknown parameter names
				print(\"Unknown parameter name:\", parameter_name)

# Function to check the list for type and removes if it exists already
func _check_list_for_type(placemark: GenericPlacemark, data: Object):
	var entry = {\"placemark\": placemark, \"data\": data}

	var index = _find_entry_index(placemark)
	if index != -1:
		var panel = placemark.get_node(\"SelectionPanel\")
		if panel:
			panel.visible = false
			selected_list.remove(index)
			reload_details_panel()
	else:
		selected_list.append(entry)
		detailspanel.show_details_of(data)
		highlight()

# Function to find the index of an entry in the list
func _find_entry_index(placemark: GenericPlacemark) -> int:
	for i in range(selected_list.size()):
		if selected_list[i][\"placemark\"] == placemark:
			return i
	return -1

# Adds the highlight selection around anything inside the selected_list
func highlight():
	for entry in selected_list:
		var placemark = entry[\"placemark\"]
		var selectionpanel = placemark.get_node(\"SelectionPanel\")
		if selectionpanel:
			selectionpanel.visible = true

# Function to clear the list
func _clear_list():
	clear_all_highlights()
	selected_list.clear()
	
func clear_all_highlights():
	for entry in selected_list:
		var placemark = entry[\"placemark\"]
		var selectionpanel = placemark.get_node(\"SelectionPanel\")
		if selectionpanel:
			selectionpanel.visible = false
			
# Function that will back load the previous panel upon deselecting
func reload_details_panel():
	if selected_list.size() > 0:
		var last_entry = selected_list[selected_list.size() - 1]
		var data = last_entry[\"data\"]
		detailspanel.show_details_of(data)


func apply_values_to_item(item_data: GatheringItem, parameters: Dictionary):
	for parameter_name in parameters.keys():
		var parameter_value = parameters[parameter_name]
		match parameter_name:
			\"drop_chance\":
				item_data.drop_chance = parameter_value
			\"number\":
				item_data.num = parameter_value
			\"max_number\":
				item_data.max_num = parameter_value
			\"quality\":
				item_data.quality = parameter_value
			\"is_hidden\":
				item_data.is_hidden = parameter_value
			# Add more cases for other parameters as needed
			_:
				# Handle unknown parameter names
				print(\"Unknown parameter name:\", parameter_name)
"

[node name="SelectedListManager" type="Node"]
script = SubResource( 1 )
