[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
resource_name = "SelectedListManager"
script/source = "extends Node

var selected_list = []
onready var detailspanel: DetailsPanel = DetailsPanel.get_instance(get_tree())
signal selection_cleared

func _init():
	connect(\"placemark_removed\", self, \"delete_selected\")

# Function to apply values to selected enemy or item
func apply_values_to_selected_type(parameter_name: String, parameter_value: int):
	for entry in selected_list:
		var data = entry[\"data\"]
		data[parameter_name] = parameter_value

# Function to check the list for type and removes if it exists already
func _toggle_selection(placemark: GenericPlacemark, data: Object):
	var entry = {\"placemark\": placemark, \"data\": data}

	var index = _find_entry_index(placemark)
	if index != -1:
		selected_list.remove(index)
		reload_details_panel()
	else:
		selected_list.append(entry)
		detailspanel.show_details_of(data)

# Function to find the index of an entry in the list
func _find_entry_index(placemark: GenericPlacemark) -> int:
	for i in range(selected_list.size()):
		if selected_list[i][\"placemark\"] == placemark:
			return i
	return -1

# Function to clear the list
func _clear_list():
	clear_all_highlights()
	selected_list.clear()
	
# Function that removes all the highlights from everything in the selectedlist before the list is wiped.
func clear_all_highlights():
	for entry in selected_list:
		var placemark = entry[\"placemark\"]
		emit_signal(\"selection_cleared\")
			
# Function that will back load the previous panel upon deselecting
func reload_details_panel():
	if selected_list.size() > 0:
		var last_entry = selected_list[selected_list.size() - 1]
		var data = last_entry[\"data\"]
		detailspanel.show_details_of(data)

#func delete_selected():
#	for entry in selected_list:
#		var placemark = entry[\"placemark\"]
#		placemark.delete_self()

func delete_selected():
	var entries_to_delete = []
	# Store entries to delete in reverse order
	for index in range(selected_list.size() - 1, -1, -1):
		var entry = selected_list[index]
		var placemark = entry[\"placemark\"]
		if placemark:
			entries_to_delete.append(entry)
			placemark.delete_self()

	# Remove entries from selected_list
	for entry_to_delete in entries_to_delete:
		selected_list.erase(selected_list.find(entry_to_delete))
		if selected_list.size() <= 0:
			_clear_list()


"

[node name="SelectedListManager" type="Node"]
script = SubResource( 1 )
