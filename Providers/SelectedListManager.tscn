[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
resource_name = "SelectedListManager"
script/source = "extends Node

var selected_list = []
onready var detailspanel: DetailsPanel = DetailsPanel.get_instance(get_tree())
signal selection_cleared

# Function to apply values to selected enemy or item
func apply_values_to_selected_type(parameter_name: String, parameter_value: int):
	for entry in selected_list:
		var data = entry[\"data\"]
		data[parameter_name] = parameter_value

# Function to check the list for type and removes if it exists already
func toggle_selection(placemark: GenericPlacemark, data: Object):
	var entry = {\"placemark\": placemark, \"data\": data}

	var index = _find_entry_index(placemark)
	if index != -1:
		selected_list.remove(index)
		_reload_details_panel() # Calling the previously selected enemies panel to avoid visual confusion
	else:
		selected_list.append(entry)
		detailspanel.show_details_of(data)

# Function to find the index of an entry in the list
func _find_entry_index(placemark: GenericPlacemark) -> int:
	for i in range(selected_list.size()):
		if selected_list[i][\"placemark\"] == placemark:
			return i
	return -1

# Function to clear the list and emit a signal to inform the placemarks.
func clear_list():
	for entry in selected_list:
		var placemark = entry[\"placemark\"]
		emit_signal(\"selection_cleared\")
		selected_list.clear()
	
			
# Function that will back load the previous panel upon deselecting
func _reload_details_panel():
	if selected_list.size() > 0:
		var last_entry = selected_list[selected_list.size() - 1]
		var data = last_entry[\"data\"]
		detailspanel.show_details_of(data)

# Function that handles the deletion of multiple placemarks.
# Handle the list in reverse order to ensure it doesn't trip over any indexes and fail to delete entries
func delete_selected():
	for index in range(selected_list.size() - 1, -1, -1):
		var entry = selected_list[index]
		var placemark = entry[\"placemark\"]
		if placemark:
			placemark.delete_self()
			var index_to_remove = _find_entry_index(placemark)
			if index_to_remove != -1:
				selected_list.remove(index_to_remove)

func unselected_removal(placemark: GenericPlacemark, data: Object):
	var entry = {\"placemark\": placemark, \"data\": data}
	var index = _find_entry_index(placemark)
	if index -1:
		selected_list.append(entry)
"

[node name="SelectedListManager" type="Node"]
script = SubResource( 1 )
